name: CI构建 # 定义workflow的名称
on: # 触发workflow的条件或者事件 每当 push 到 main/master 分支时触发部署
  push:
    branches: [ main,master ]

env:
  APP_NAME: dist # 给 APP 起一个名字

# 任务
jobs:
  build-and-deploy:
    # 服务器环境：最新版 Ubuntu
    runs-on: ubuntu-latest
    steps:
      # 拉取代码
      - name: 检出代码
        uses: actions/checkout@master

      - name: 编译构建
        run: |
          ls
          npm -v
          npm i
          npm run build

      - name: 同步代码
        uses: burnett01/rsync-deployments@5.1
        with:
          switches: -avzr --delete
          path: dist
          remote_path: /micro-server-code/$APP_NAME/ # 将代码发布到远程主机进行构建,当然你需要自己创建 /micro-server-code 目录 $APP_NAME 是全局的变量
          remote_host: ${{ secrets.Host }} # ip 地址 curl ip.sb
          remote_port: 22
          remote_user: root
          remote_key: ${{ secrets.DeploySecret }} # 请使用 ssh-keygen -t rsa 生成秘钥对,然后将公钥拷贝到要操纵的目标器的/root/.ssh/authorized_keys里,再把私钥黏贴到 github 后台的secret里

      - name: 构建代码与发布
        uses: appleboy/ssh-action@master
        env: # 定义环境变量
          APP_NAME: ${{ env.APP_NAME }} # 避免下面的 script 使用主机上自带的环境变量
        with:
          host: ${{ secrets.Host }}
          username: root
          key: ${{ secrets.DeploySecret }}
          port: 22
          envs: APP_NAME  # 使用这个环境变量
          script: | # 下面的发布与重启,你可以使用 ansible 与 supervisor 配合进行,如果发布到本地,进行重启,你可以考虑用一下形式
            echo  $APP_NAME





